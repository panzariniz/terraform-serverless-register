service: api

provider:
  name: aws
  runtime: nodejs12.x

  stage: dev
  region: us-east-1

functions:
  register:
    role: ${ssm:${self:custom.stage}-register-iam-role}
    handler: register/handler.store
    environment:
      DYNAMODB_USERS: ${ssm:${self:custom.stage}-dynamodb-users-table}
    events:
      - http:
          path: users
          method: post
  login:
    role: ${ssm:${self:custom.stage}-login-iam-role}
    handler: login/handler.store
    environment:
      DYNAMODB_USERS: ${ssm:${self:custom.stage}-dynamodb-users-table}
      DYNAMODB_USERS_INDEX_EMAIL: ${ssm:${self:custom.stage}-email-gsi}
      JWT_SECRET: ${ssm:${self:custom.stage}-jwt-secret}
    events:
      - http:
          path: login
          method: post
  create-booking:
    role: ${ssm:${self:custom.stage}-create-booking-iam-role}
    handler: create-booking/handler.store
    environment:
      DYNAMODB_BOOKINGS: ${ssm:${self:custom.stage}-dynamodb-bookings-table}
    events:
      - http:
          path: bookings
          method: post
          authorizer: authorizer
  list-bookings:
    role: ${ssm:${self:custom.stage}-list-bookings-iam-role}
    handler: list-bookings/handler.index
    environment:
      DYNAMODB_BOOKINGS: ${ssm:${self:custom.stage}-dynamodb-bookings-table}
    events:
      - http:
          path: bookings
          method: get
          authorizer: authorizer

  authorizer:
    handler: authorizer/handler.authorizer
    environment:
      JWT_SECRET: ${ssm:${self:custom.stage}-jwt-secret}

custom:
  stage: ${opt:stage, self:provider.stage}
